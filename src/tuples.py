#!/usr/bin/env python

"""
Helper script. Generates relevant implementations for tuples.

This is used instead of rust macros for clarity reasons.
"""


import os

prelude = """\
//
// generated by `tuples.py` - DO NOT EDIT
//

"""


def fmt(tmpl, **kwargs):
    return tmpl % kwargs


def elt_ty(idx):
    return "E" + str(idx)


def tuple_ty(width):
    return "(%s)" % " ".join(elt_ty(idx) + "," for idx in range(width))


def impl_generics(width):
    return "impl<%s>" % ", ".join(elt_ty(idx) + ": Packable" for idx in range(width))


tuple_bit_tmpl = "<%(upto)s as PackableTuple>::last_to_tuple_bits(self.%(idx)s)"
to_tuple_tmpl = "<%(upto)s as PackableTuple>::tuple_bits_to_last(bits)"

trait_impl_tmpl = """
unsafe %(impl)s PackableTuple for %(tup)s {
    #[doc(hidden)]
    type Storage = E0::Storage;  // Take 1st elt's nullability

    #[doc(hidden)]
    type Last = %(last)s;

    #[doc(hidden)]
    const LAST_HIGH_BIT: u32 = <%(butlast)s>::LAST_LOW_BIT;
    #[doc(hidden)]
    const LAST_LOW_BIT: u32 = Self::LAST_HIGH_BIT - Self::Last::BITS;

    #[doc(hidden)]
    type LastBitRange = detail::TupleEltBitRange<Self>;

    #[doc(hidden)]
    #[inline]
    fn to_tuple_bits(self) -> usize {
        %(tuplebits)s
    }

    #[doc(hidden)]
    #[inline]
    unsafe fn from_tuple_bits(bits: usize) -> Self {
        (
            %(to_tuple)s,
        )
    }
}
"""


def gen_tuple(width):
    tuplebits = " |\n            ".join(
        fmt(tuple_bit_tmpl, upto=tuple_ty(idx + 1), idx=idx) for idx in range(width)
    )

    to_tuple = ",\n            ".join(
        fmt(to_tuple_tmpl, upto=tuple_ty(idx + 1)) for idx in range(width)
    )

    return fmt(
        trait_impl_tmpl,
        impl=impl_generics(width),
        tup=tuple_ty(width),
        butlast=tuple_ty(width - 1),
        last=elt_ty(width - 1),
        tuplebits=tuplebits,
        to_tuple=to_tuple,
    )


elt_getset_tmpl = """\
    pub fn get_%(idx)s(self) -> %(ty)s {
        unsafe { <%(upto)s as PackableTuple>::tuple_bits_to_last(self.to_bits()) }
    }

    pub fn update_%(idx)s(self, value: %(ty)s) -> Self {
        let bits = <%(upto)s as PackableTuple>::update_tuple_bits_with_last(
            self.to_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }"""


def gen_elt_getset(idx):
    return fmt(elt_getset_tmpl, idx=idx, ty=elt_ty(idx), upto=tuple_ty(idx + 1))


inherent_tmpl = """\
%(impl)s PtrPack<%(tup)s> {
%(getset)s
}
"""


def gen_inherent(width):
    getset = "\n\n".join(gen_elt_getset(idx) for idx in range(width))

    return fmt(
        inherent_tmpl, impl=impl_generics(width), tup=tuple_ty(width), getset=getset
    )


def main():
    tuples_rs = os.path.join(os.path.dirname(__file__), "tuples.rs")
    result = prelude
    for width in range(16):
        result += gen_tuple(width + 1)
        result += gen_inherent(width + 1)

    print(result)
    with open(tuples_rs, "w") as f:
        f.write(result)


if __name__ == "__main__":
    main()
