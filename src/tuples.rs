//
// generated by `tuples.py` - DO NOT EDIT
//


unsafe impl<E0: Packable> PackableTuple for (E0,) {
    #[doc(hidden)]
    type Storage = E0::Storage;  // Take 1st elt's nullability

    #[doc(hidden)]
    type Last = E0;

    #[doc(hidden)]
    const LAST_HIGH_BIT: u32 = <()>::LAST_LOW_BIT;
    #[doc(hidden)]
    const LAST_LOW_BIT: u32 = Self::LAST_HIGH_BIT - Self::Last::BITS;

    #[doc(hidden)]
    type LastBitRange = detail::TupleEltBitRange<Self>;

    #[doc(hidden)]
    #[inline]
    fn tuple_to_tuple_bits(self) -> usize {
        <(E0,) as PackableTuple>::last_to_tuple_bits(self.0)
    }

    #[doc(hidden)]
    #[inline]
    unsafe fn tuple_bits_to_tuple(bits: usize) -> Self {
        (
            <(E0,) as PackableTuple>::tuple_bits_to_last(bits),
        )
    }
}
impl<E0: Packable> PtrPack<(E0,)> {
    pub fn get_0(self) -> E0 {
        unsafe { <(E0,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_0(self, value: E0) -> Self {
        let bits = <(E0,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }
}

unsafe impl<E0: Packable, E1: Packable> PackableTuple for (E0, E1,) {
    #[doc(hidden)]
    type Storage = E0::Storage;  // Take 1st elt's nullability

    #[doc(hidden)]
    type Last = E1;

    #[doc(hidden)]
    const LAST_HIGH_BIT: u32 = <(E0,)>::LAST_LOW_BIT;
    #[doc(hidden)]
    const LAST_LOW_BIT: u32 = Self::LAST_HIGH_BIT - Self::Last::BITS;

    #[doc(hidden)]
    type LastBitRange = detail::TupleEltBitRange<Self>;

    #[doc(hidden)]
    #[inline]
    fn tuple_to_tuple_bits(self) -> usize {
        <(E0,) as PackableTuple>::last_to_tuple_bits(self.0) |
            <(E0, E1,) as PackableTuple>::last_to_tuple_bits(self.1)
    }

    #[doc(hidden)]
    #[inline]
    unsafe fn tuple_bits_to_tuple(bits: usize) -> Self {
        (
            <(E0,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1,) as PackableTuple>::tuple_bits_to_last(bits),
        )
    }
}
impl<E0: Packable, E1: Packable> PtrPack<(E0, E1,)> {
    pub fn get_0(self) -> E0 {
        unsafe { <(E0,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_0(self, value: E0) -> Self {
        let bits = <(E0,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_1(self) -> E1 {
        unsafe { <(E0, E1,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_1(self, value: E1) -> Self {
        let bits = <(E0, E1,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }
}

unsafe impl<E0: Packable, E1: Packable, E2: Packable> PackableTuple for (E0, E1, E2,) {
    #[doc(hidden)]
    type Storage = E0::Storage;  // Take 1st elt's nullability

    #[doc(hidden)]
    type Last = E2;

    #[doc(hidden)]
    const LAST_HIGH_BIT: u32 = <(E0, E1,)>::LAST_LOW_BIT;
    #[doc(hidden)]
    const LAST_LOW_BIT: u32 = Self::LAST_HIGH_BIT - Self::Last::BITS;

    #[doc(hidden)]
    type LastBitRange = detail::TupleEltBitRange<Self>;

    #[doc(hidden)]
    #[inline]
    fn tuple_to_tuple_bits(self) -> usize {
        <(E0,) as PackableTuple>::last_to_tuple_bits(self.0) |
            <(E0, E1,) as PackableTuple>::last_to_tuple_bits(self.1) |
            <(E0, E1, E2,) as PackableTuple>::last_to_tuple_bits(self.2)
    }

    #[doc(hidden)]
    #[inline]
    unsafe fn tuple_bits_to_tuple(bits: usize) -> Self {
        (
            <(E0,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2,) as PackableTuple>::tuple_bits_to_last(bits),
        )
    }
}
impl<E0: Packable, E1: Packable, E2: Packable> PtrPack<(E0, E1, E2,)> {
    pub fn get_0(self) -> E0 {
        unsafe { <(E0,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_0(self, value: E0) -> Self {
        let bits = <(E0,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_1(self) -> E1 {
        unsafe { <(E0, E1,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_1(self, value: E1) -> Self {
        let bits = <(E0, E1,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_2(self) -> E2 {
        unsafe { <(E0, E1, E2,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_2(self, value: E2) -> Self {
        let bits = <(E0, E1, E2,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }
}

unsafe impl<E0: Packable, E1: Packable, E2: Packable, E3: Packable> PackableTuple for (E0, E1, E2, E3,) {
    #[doc(hidden)]
    type Storage = E0::Storage;  // Take 1st elt's nullability

    #[doc(hidden)]
    type Last = E3;

    #[doc(hidden)]
    const LAST_HIGH_BIT: u32 = <(E0, E1, E2,)>::LAST_LOW_BIT;
    #[doc(hidden)]
    const LAST_LOW_BIT: u32 = Self::LAST_HIGH_BIT - Self::Last::BITS;

    #[doc(hidden)]
    type LastBitRange = detail::TupleEltBitRange<Self>;

    #[doc(hidden)]
    #[inline]
    fn tuple_to_tuple_bits(self) -> usize {
        <(E0,) as PackableTuple>::last_to_tuple_bits(self.0) |
            <(E0, E1,) as PackableTuple>::last_to_tuple_bits(self.1) |
            <(E0, E1, E2,) as PackableTuple>::last_to_tuple_bits(self.2) |
            <(E0, E1, E2, E3,) as PackableTuple>::last_to_tuple_bits(self.3)
    }

    #[doc(hidden)]
    #[inline]
    unsafe fn tuple_bits_to_tuple(bits: usize) -> Self {
        (
            <(E0,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3,) as PackableTuple>::tuple_bits_to_last(bits),
        )
    }
}
impl<E0: Packable, E1: Packable, E2: Packable, E3: Packable> PtrPack<(E0, E1, E2, E3,)> {
    pub fn get_0(self) -> E0 {
        unsafe { <(E0,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_0(self, value: E0) -> Self {
        let bits = <(E0,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_1(self) -> E1 {
        unsafe { <(E0, E1,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_1(self, value: E1) -> Self {
        let bits = <(E0, E1,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_2(self) -> E2 {
        unsafe { <(E0, E1, E2,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_2(self, value: E2) -> Self {
        let bits = <(E0, E1, E2,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_3(self) -> E3 {
        unsafe { <(E0, E1, E2, E3,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_3(self, value: E3) -> Self {
        let bits = <(E0, E1, E2, E3,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }
}

unsafe impl<E0: Packable, E1: Packable, E2: Packable, E3: Packable, E4: Packable> PackableTuple for (E0, E1, E2, E3, E4,) {
    #[doc(hidden)]
    type Storage = E0::Storage;  // Take 1st elt's nullability

    #[doc(hidden)]
    type Last = E4;

    #[doc(hidden)]
    const LAST_HIGH_BIT: u32 = <(E0, E1, E2, E3,)>::LAST_LOW_BIT;
    #[doc(hidden)]
    const LAST_LOW_BIT: u32 = Self::LAST_HIGH_BIT - Self::Last::BITS;

    #[doc(hidden)]
    type LastBitRange = detail::TupleEltBitRange<Self>;

    #[doc(hidden)]
    #[inline]
    fn tuple_to_tuple_bits(self) -> usize {
        <(E0,) as PackableTuple>::last_to_tuple_bits(self.0) |
            <(E0, E1,) as PackableTuple>::last_to_tuple_bits(self.1) |
            <(E0, E1, E2,) as PackableTuple>::last_to_tuple_bits(self.2) |
            <(E0, E1, E2, E3,) as PackableTuple>::last_to_tuple_bits(self.3) |
            <(E0, E1, E2, E3, E4,) as PackableTuple>::last_to_tuple_bits(self.4)
    }

    #[doc(hidden)]
    #[inline]
    unsafe fn tuple_bits_to_tuple(bits: usize) -> Self {
        (
            <(E0,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4,) as PackableTuple>::tuple_bits_to_last(bits),
        )
    }
}
impl<E0: Packable, E1: Packable, E2: Packable, E3: Packable, E4: Packable> PtrPack<(E0, E1, E2, E3, E4,)> {
    pub fn get_0(self) -> E0 {
        unsafe { <(E0,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_0(self, value: E0) -> Self {
        let bits = <(E0,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_1(self) -> E1 {
        unsafe { <(E0, E1,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_1(self, value: E1) -> Self {
        let bits = <(E0, E1,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_2(self) -> E2 {
        unsafe { <(E0, E1, E2,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_2(self, value: E2) -> Self {
        let bits = <(E0, E1, E2,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_3(self) -> E3 {
        unsafe { <(E0, E1, E2, E3,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_3(self, value: E3) -> Self {
        let bits = <(E0, E1, E2, E3,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_4(self) -> E4 {
        unsafe { <(E0, E1, E2, E3, E4,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_4(self, value: E4) -> Self {
        let bits = <(E0, E1, E2, E3, E4,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }
}

unsafe impl<E0: Packable, E1: Packable, E2: Packable, E3: Packable, E4: Packable, E5: Packable> PackableTuple for (E0, E1, E2, E3, E4, E5,) {
    #[doc(hidden)]
    type Storage = E0::Storage;  // Take 1st elt's nullability

    #[doc(hidden)]
    type Last = E5;

    #[doc(hidden)]
    const LAST_HIGH_BIT: u32 = <(E0, E1, E2, E3, E4,)>::LAST_LOW_BIT;
    #[doc(hidden)]
    const LAST_LOW_BIT: u32 = Self::LAST_HIGH_BIT - Self::Last::BITS;

    #[doc(hidden)]
    type LastBitRange = detail::TupleEltBitRange<Self>;

    #[doc(hidden)]
    #[inline]
    fn tuple_to_tuple_bits(self) -> usize {
        <(E0,) as PackableTuple>::last_to_tuple_bits(self.0) |
            <(E0, E1,) as PackableTuple>::last_to_tuple_bits(self.1) |
            <(E0, E1, E2,) as PackableTuple>::last_to_tuple_bits(self.2) |
            <(E0, E1, E2, E3,) as PackableTuple>::last_to_tuple_bits(self.3) |
            <(E0, E1, E2, E3, E4,) as PackableTuple>::last_to_tuple_bits(self.4) |
            <(E0, E1, E2, E3, E4, E5,) as PackableTuple>::last_to_tuple_bits(self.5)
    }

    #[doc(hidden)]
    #[inline]
    unsafe fn tuple_bits_to_tuple(bits: usize) -> Self {
        (
            <(E0,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5,) as PackableTuple>::tuple_bits_to_last(bits),
        )
    }
}
impl<E0: Packable, E1: Packable, E2: Packable, E3: Packable, E4: Packable, E5: Packable> PtrPack<(E0, E1, E2, E3, E4, E5,)> {
    pub fn get_0(self) -> E0 {
        unsafe { <(E0,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_0(self, value: E0) -> Self {
        let bits = <(E0,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_1(self) -> E1 {
        unsafe { <(E0, E1,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_1(self, value: E1) -> Self {
        let bits = <(E0, E1,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_2(self) -> E2 {
        unsafe { <(E0, E1, E2,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_2(self, value: E2) -> Self {
        let bits = <(E0, E1, E2,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_3(self) -> E3 {
        unsafe { <(E0, E1, E2, E3,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_3(self, value: E3) -> Self {
        let bits = <(E0, E1, E2, E3,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_4(self) -> E4 {
        unsafe { <(E0, E1, E2, E3, E4,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_4(self, value: E4) -> Self {
        let bits = <(E0, E1, E2, E3, E4,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_5(self) -> E5 {
        unsafe { <(E0, E1, E2, E3, E4, E5,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_5(self, value: E5) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }
}

unsafe impl<E0: Packable, E1: Packable, E2: Packable, E3: Packable, E4: Packable, E5: Packable, E6: Packable> PackableTuple for (E0, E1, E2, E3, E4, E5, E6,) {
    #[doc(hidden)]
    type Storage = E0::Storage;  // Take 1st elt's nullability

    #[doc(hidden)]
    type Last = E6;

    #[doc(hidden)]
    const LAST_HIGH_BIT: u32 = <(E0, E1, E2, E3, E4, E5,)>::LAST_LOW_BIT;
    #[doc(hidden)]
    const LAST_LOW_BIT: u32 = Self::LAST_HIGH_BIT - Self::Last::BITS;

    #[doc(hidden)]
    type LastBitRange = detail::TupleEltBitRange<Self>;

    #[doc(hidden)]
    #[inline]
    fn tuple_to_tuple_bits(self) -> usize {
        <(E0,) as PackableTuple>::last_to_tuple_bits(self.0) |
            <(E0, E1,) as PackableTuple>::last_to_tuple_bits(self.1) |
            <(E0, E1, E2,) as PackableTuple>::last_to_tuple_bits(self.2) |
            <(E0, E1, E2, E3,) as PackableTuple>::last_to_tuple_bits(self.3) |
            <(E0, E1, E2, E3, E4,) as PackableTuple>::last_to_tuple_bits(self.4) |
            <(E0, E1, E2, E3, E4, E5,) as PackableTuple>::last_to_tuple_bits(self.5) |
            <(E0, E1, E2, E3, E4, E5, E6,) as PackableTuple>::last_to_tuple_bits(self.6)
    }

    #[doc(hidden)]
    #[inline]
    unsafe fn tuple_bits_to_tuple(bits: usize) -> Self {
        (
            <(E0,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5, E6,) as PackableTuple>::tuple_bits_to_last(bits),
        )
    }
}
impl<E0: Packable, E1: Packable, E2: Packable, E3: Packable, E4: Packable, E5: Packable, E6: Packable> PtrPack<(E0, E1, E2, E3, E4, E5, E6,)> {
    pub fn get_0(self) -> E0 {
        unsafe { <(E0,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_0(self, value: E0) -> Self {
        let bits = <(E0,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_1(self) -> E1 {
        unsafe { <(E0, E1,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_1(self, value: E1) -> Self {
        let bits = <(E0, E1,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_2(self) -> E2 {
        unsafe { <(E0, E1, E2,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_2(self, value: E2) -> Self {
        let bits = <(E0, E1, E2,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_3(self) -> E3 {
        unsafe { <(E0, E1, E2, E3,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_3(self, value: E3) -> Self {
        let bits = <(E0, E1, E2, E3,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_4(self) -> E4 {
        unsafe { <(E0, E1, E2, E3, E4,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_4(self, value: E4) -> Self {
        let bits = <(E0, E1, E2, E3, E4,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_5(self) -> E5 {
        unsafe { <(E0, E1, E2, E3, E4, E5,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_5(self, value: E5) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_6(self) -> E6 {
        unsafe { <(E0, E1, E2, E3, E4, E5, E6,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_6(self, value: E6) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5, E6,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }
}

unsafe impl<E0: Packable, E1: Packable, E2: Packable, E3: Packable, E4: Packable, E5: Packable, E6: Packable, E7: Packable> PackableTuple for (E0, E1, E2, E3, E4, E5, E6, E7,) {
    #[doc(hidden)]
    type Storage = E0::Storage;  // Take 1st elt's nullability

    #[doc(hidden)]
    type Last = E7;

    #[doc(hidden)]
    const LAST_HIGH_BIT: u32 = <(E0, E1, E2, E3, E4, E5, E6,)>::LAST_LOW_BIT;
    #[doc(hidden)]
    const LAST_LOW_BIT: u32 = Self::LAST_HIGH_BIT - Self::Last::BITS;

    #[doc(hidden)]
    type LastBitRange = detail::TupleEltBitRange<Self>;

    #[doc(hidden)]
    #[inline]
    fn tuple_to_tuple_bits(self) -> usize {
        <(E0,) as PackableTuple>::last_to_tuple_bits(self.0) |
            <(E0, E1,) as PackableTuple>::last_to_tuple_bits(self.1) |
            <(E0, E1, E2,) as PackableTuple>::last_to_tuple_bits(self.2) |
            <(E0, E1, E2, E3,) as PackableTuple>::last_to_tuple_bits(self.3) |
            <(E0, E1, E2, E3, E4,) as PackableTuple>::last_to_tuple_bits(self.4) |
            <(E0, E1, E2, E3, E4, E5,) as PackableTuple>::last_to_tuple_bits(self.5) |
            <(E0, E1, E2, E3, E4, E5, E6,) as PackableTuple>::last_to_tuple_bits(self.6) |
            <(E0, E1, E2, E3, E4, E5, E6, E7,) as PackableTuple>::last_to_tuple_bits(self.7)
    }

    #[doc(hidden)]
    #[inline]
    unsafe fn tuple_bits_to_tuple(bits: usize) -> Self {
        (
            <(E0,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5, E6,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5, E6, E7,) as PackableTuple>::tuple_bits_to_last(bits),
        )
    }
}
impl<E0: Packable, E1: Packable, E2: Packable, E3: Packable, E4: Packable, E5: Packable, E6: Packable, E7: Packable> PtrPack<(E0, E1, E2, E3, E4, E5, E6, E7,)> {
    pub fn get_0(self) -> E0 {
        unsafe { <(E0,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_0(self, value: E0) -> Self {
        let bits = <(E0,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_1(self) -> E1 {
        unsafe { <(E0, E1,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_1(self, value: E1) -> Self {
        let bits = <(E0, E1,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_2(self) -> E2 {
        unsafe { <(E0, E1, E2,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_2(self, value: E2) -> Self {
        let bits = <(E0, E1, E2,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_3(self) -> E3 {
        unsafe { <(E0, E1, E2, E3,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_3(self, value: E3) -> Self {
        let bits = <(E0, E1, E2, E3,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_4(self) -> E4 {
        unsafe { <(E0, E1, E2, E3, E4,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_4(self, value: E4) -> Self {
        let bits = <(E0, E1, E2, E3, E4,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_5(self) -> E5 {
        unsafe { <(E0, E1, E2, E3, E4, E5,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_5(self, value: E5) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_6(self) -> E6 {
        unsafe { <(E0, E1, E2, E3, E4, E5, E6,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_6(self, value: E6) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5, E6,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_7(self) -> E7 {
        unsafe { <(E0, E1, E2, E3, E4, E5, E6, E7,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_7(self, value: E7) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5, E6, E7,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }
}

unsafe impl<E0: Packable, E1: Packable, E2: Packable, E3: Packable, E4: Packable, E5: Packable, E6: Packable, E7: Packable, E8: Packable> PackableTuple for (E0, E1, E2, E3, E4, E5, E6, E7, E8,) {
    #[doc(hidden)]
    type Storage = E0::Storage;  // Take 1st elt's nullability

    #[doc(hidden)]
    type Last = E8;

    #[doc(hidden)]
    const LAST_HIGH_BIT: u32 = <(E0, E1, E2, E3, E4, E5, E6, E7,)>::LAST_LOW_BIT;
    #[doc(hidden)]
    const LAST_LOW_BIT: u32 = Self::LAST_HIGH_BIT - Self::Last::BITS;

    #[doc(hidden)]
    type LastBitRange = detail::TupleEltBitRange<Self>;

    #[doc(hidden)]
    #[inline]
    fn tuple_to_tuple_bits(self) -> usize {
        <(E0,) as PackableTuple>::last_to_tuple_bits(self.0) |
            <(E0, E1,) as PackableTuple>::last_to_tuple_bits(self.1) |
            <(E0, E1, E2,) as PackableTuple>::last_to_tuple_bits(self.2) |
            <(E0, E1, E2, E3,) as PackableTuple>::last_to_tuple_bits(self.3) |
            <(E0, E1, E2, E3, E4,) as PackableTuple>::last_to_tuple_bits(self.4) |
            <(E0, E1, E2, E3, E4, E5,) as PackableTuple>::last_to_tuple_bits(self.5) |
            <(E0, E1, E2, E3, E4, E5, E6,) as PackableTuple>::last_to_tuple_bits(self.6) |
            <(E0, E1, E2, E3, E4, E5, E6, E7,) as PackableTuple>::last_to_tuple_bits(self.7) |
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8,) as PackableTuple>::last_to_tuple_bits(self.8)
    }

    #[doc(hidden)]
    #[inline]
    unsafe fn tuple_bits_to_tuple(bits: usize) -> Self {
        (
            <(E0,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5, E6,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5, E6, E7,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8,) as PackableTuple>::tuple_bits_to_last(bits),
        )
    }
}
impl<E0: Packable, E1: Packable, E2: Packable, E3: Packable, E4: Packable, E5: Packable, E6: Packable, E7: Packable, E8: Packable> PtrPack<(E0, E1, E2, E3, E4, E5, E6, E7, E8,)> {
    pub fn get_0(self) -> E0 {
        unsafe { <(E0,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_0(self, value: E0) -> Self {
        let bits = <(E0,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_1(self) -> E1 {
        unsafe { <(E0, E1,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_1(self, value: E1) -> Self {
        let bits = <(E0, E1,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_2(self) -> E2 {
        unsafe { <(E0, E1, E2,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_2(self, value: E2) -> Self {
        let bits = <(E0, E1, E2,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_3(self) -> E3 {
        unsafe { <(E0, E1, E2, E3,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_3(self, value: E3) -> Self {
        let bits = <(E0, E1, E2, E3,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_4(self) -> E4 {
        unsafe { <(E0, E1, E2, E3, E4,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_4(self, value: E4) -> Self {
        let bits = <(E0, E1, E2, E3, E4,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_5(self) -> E5 {
        unsafe { <(E0, E1, E2, E3, E4, E5,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_5(self, value: E5) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_6(self) -> E6 {
        unsafe { <(E0, E1, E2, E3, E4, E5, E6,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_6(self, value: E6) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5, E6,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_7(self) -> E7 {
        unsafe { <(E0, E1, E2, E3, E4, E5, E6, E7,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_7(self, value: E7) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5, E6, E7,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_8(self) -> E8 {
        unsafe { <(E0, E1, E2, E3, E4, E5, E6, E7, E8,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_8(self, value: E8) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5, E6, E7, E8,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }
}

unsafe impl<E0: Packable, E1: Packable, E2: Packable, E3: Packable, E4: Packable, E5: Packable, E6: Packable, E7: Packable, E8: Packable, E9: Packable> PackableTuple for (E0, E1, E2, E3, E4, E5, E6, E7, E8, E9,) {
    #[doc(hidden)]
    type Storage = E0::Storage;  // Take 1st elt's nullability

    #[doc(hidden)]
    type Last = E9;

    #[doc(hidden)]
    const LAST_HIGH_BIT: u32 = <(E0, E1, E2, E3, E4, E5, E6, E7, E8,)>::LAST_LOW_BIT;
    #[doc(hidden)]
    const LAST_LOW_BIT: u32 = Self::LAST_HIGH_BIT - Self::Last::BITS;

    #[doc(hidden)]
    type LastBitRange = detail::TupleEltBitRange<Self>;

    #[doc(hidden)]
    #[inline]
    fn tuple_to_tuple_bits(self) -> usize {
        <(E0,) as PackableTuple>::last_to_tuple_bits(self.0) |
            <(E0, E1,) as PackableTuple>::last_to_tuple_bits(self.1) |
            <(E0, E1, E2,) as PackableTuple>::last_to_tuple_bits(self.2) |
            <(E0, E1, E2, E3,) as PackableTuple>::last_to_tuple_bits(self.3) |
            <(E0, E1, E2, E3, E4,) as PackableTuple>::last_to_tuple_bits(self.4) |
            <(E0, E1, E2, E3, E4, E5,) as PackableTuple>::last_to_tuple_bits(self.5) |
            <(E0, E1, E2, E3, E4, E5, E6,) as PackableTuple>::last_to_tuple_bits(self.6) |
            <(E0, E1, E2, E3, E4, E5, E6, E7,) as PackableTuple>::last_to_tuple_bits(self.7) |
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8,) as PackableTuple>::last_to_tuple_bits(self.8) |
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9,) as PackableTuple>::last_to_tuple_bits(self.9)
    }

    #[doc(hidden)]
    #[inline]
    unsafe fn tuple_bits_to_tuple(bits: usize) -> Self {
        (
            <(E0,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5, E6,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5, E6, E7,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9,) as PackableTuple>::tuple_bits_to_last(bits),
        )
    }
}
impl<E0: Packable, E1: Packable, E2: Packable, E3: Packable, E4: Packable, E5: Packable, E6: Packable, E7: Packable, E8: Packable, E9: Packable> PtrPack<(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9,)> {
    pub fn get_0(self) -> E0 {
        unsafe { <(E0,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_0(self, value: E0) -> Self {
        let bits = <(E0,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_1(self) -> E1 {
        unsafe { <(E0, E1,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_1(self, value: E1) -> Self {
        let bits = <(E0, E1,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_2(self) -> E2 {
        unsafe { <(E0, E1, E2,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_2(self, value: E2) -> Self {
        let bits = <(E0, E1, E2,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_3(self) -> E3 {
        unsafe { <(E0, E1, E2, E3,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_3(self, value: E3) -> Self {
        let bits = <(E0, E1, E2, E3,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_4(self) -> E4 {
        unsafe { <(E0, E1, E2, E3, E4,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_4(self, value: E4) -> Self {
        let bits = <(E0, E1, E2, E3, E4,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_5(self) -> E5 {
        unsafe { <(E0, E1, E2, E3, E4, E5,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_5(self, value: E5) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_6(self) -> E6 {
        unsafe { <(E0, E1, E2, E3, E4, E5, E6,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_6(self, value: E6) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5, E6,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_7(self) -> E7 {
        unsafe { <(E0, E1, E2, E3, E4, E5, E6, E7,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_7(self, value: E7) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5, E6, E7,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_8(self) -> E8 {
        unsafe { <(E0, E1, E2, E3, E4, E5, E6, E7, E8,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_8(self, value: E8) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5, E6, E7, E8,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_9(self) -> E9 {
        unsafe { <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_9(self, value: E9) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }
}

unsafe impl<E0: Packable, E1: Packable, E2: Packable, E3: Packable, E4: Packable, E5: Packable, E6: Packable, E7: Packable, E8: Packable, E9: Packable, E10: Packable> PackableTuple for (E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10,) {
    #[doc(hidden)]
    type Storage = E0::Storage;  // Take 1st elt's nullability

    #[doc(hidden)]
    type Last = E10;

    #[doc(hidden)]
    const LAST_HIGH_BIT: u32 = <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9,)>::LAST_LOW_BIT;
    #[doc(hidden)]
    const LAST_LOW_BIT: u32 = Self::LAST_HIGH_BIT - Self::Last::BITS;

    #[doc(hidden)]
    type LastBitRange = detail::TupleEltBitRange<Self>;

    #[doc(hidden)]
    #[inline]
    fn tuple_to_tuple_bits(self) -> usize {
        <(E0,) as PackableTuple>::last_to_tuple_bits(self.0) |
            <(E0, E1,) as PackableTuple>::last_to_tuple_bits(self.1) |
            <(E0, E1, E2,) as PackableTuple>::last_to_tuple_bits(self.2) |
            <(E0, E1, E2, E3,) as PackableTuple>::last_to_tuple_bits(self.3) |
            <(E0, E1, E2, E3, E4,) as PackableTuple>::last_to_tuple_bits(self.4) |
            <(E0, E1, E2, E3, E4, E5,) as PackableTuple>::last_to_tuple_bits(self.5) |
            <(E0, E1, E2, E3, E4, E5, E6,) as PackableTuple>::last_to_tuple_bits(self.6) |
            <(E0, E1, E2, E3, E4, E5, E6, E7,) as PackableTuple>::last_to_tuple_bits(self.7) |
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8,) as PackableTuple>::last_to_tuple_bits(self.8) |
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9,) as PackableTuple>::last_to_tuple_bits(self.9) |
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10,) as PackableTuple>::last_to_tuple_bits(self.10)
    }

    #[doc(hidden)]
    #[inline]
    unsafe fn tuple_bits_to_tuple(bits: usize) -> Self {
        (
            <(E0,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5, E6,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5, E6, E7,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10,) as PackableTuple>::tuple_bits_to_last(bits),
        )
    }
}
impl<E0: Packable, E1: Packable, E2: Packable, E3: Packable, E4: Packable, E5: Packable, E6: Packable, E7: Packable, E8: Packable, E9: Packable, E10: Packable> PtrPack<(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10,)> {
    pub fn get_0(self) -> E0 {
        unsafe { <(E0,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_0(self, value: E0) -> Self {
        let bits = <(E0,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_1(self) -> E1 {
        unsafe { <(E0, E1,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_1(self, value: E1) -> Self {
        let bits = <(E0, E1,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_2(self) -> E2 {
        unsafe { <(E0, E1, E2,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_2(self, value: E2) -> Self {
        let bits = <(E0, E1, E2,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_3(self) -> E3 {
        unsafe { <(E0, E1, E2, E3,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_3(self, value: E3) -> Self {
        let bits = <(E0, E1, E2, E3,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_4(self) -> E4 {
        unsafe { <(E0, E1, E2, E3, E4,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_4(self, value: E4) -> Self {
        let bits = <(E0, E1, E2, E3, E4,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_5(self) -> E5 {
        unsafe { <(E0, E1, E2, E3, E4, E5,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_5(self, value: E5) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_6(self) -> E6 {
        unsafe { <(E0, E1, E2, E3, E4, E5, E6,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_6(self, value: E6) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5, E6,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_7(self) -> E7 {
        unsafe { <(E0, E1, E2, E3, E4, E5, E6, E7,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_7(self, value: E7) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5, E6, E7,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_8(self) -> E8 {
        unsafe { <(E0, E1, E2, E3, E4, E5, E6, E7, E8,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_8(self, value: E8) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5, E6, E7, E8,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_9(self) -> E9 {
        unsafe { <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_9(self, value: E9) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_10(self) -> E10 {
        unsafe { <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_10(self, value: E10) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }
}

unsafe impl<E0: Packable, E1: Packable, E2: Packable, E3: Packable, E4: Packable, E5: Packable, E6: Packable, E7: Packable, E8: Packable, E9: Packable, E10: Packable, E11: Packable> PackableTuple for (E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11,) {
    #[doc(hidden)]
    type Storage = E0::Storage;  // Take 1st elt's nullability

    #[doc(hidden)]
    type Last = E11;

    #[doc(hidden)]
    const LAST_HIGH_BIT: u32 = <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10,)>::LAST_LOW_BIT;
    #[doc(hidden)]
    const LAST_LOW_BIT: u32 = Self::LAST_HIGH_BIT - Self::Last::BITS;

    #[doc(hidden)]
    type LastBitRange = detail::TupleEltBitRange<Self>;

    #[doc(hidden)]
    #[inline]
    fn tuple_to_tuple_bits(self) -> usize {
        <(E0,) as PackableTuple>::last_to_tuple_bits(self.0) |
            <(E0, E1,) as PackableTuple>::last_to_tuple_bits(self.1) |
            <(E0, E1, E2,) as PackableTuple>::last_to_tuple_bits(self.2) |
            <(E0, E1, E2, E3,) as PackableTuple>::last_to_tuple_bits(self.3) |
            <(E0, E1, E2, E3, E4,) as PackableTuple>::last_to_tuple_bits(self.4) |
            <(E0, E1, E2, E3, E4, E5,) as PackableTuple>::last_to_tuple_bits(self.5) |
            <(E0, E1, E2, E3, E4, E5, E6,) as PackableTuple>::last_to_tuple_bits(self.6) |
            <(E0, E1, E2, E3, E4, E5, E6, E7,) as PackableTuple>::last_to_tuple_bits(self.7) |
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8,) as PackableTuple>::last_to_tuple_bits(self.8) |
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9,) as PackableTuple>::last_to_tuple_bits(self.9) |
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10,) as PackableTuple>::last_to_tuple_bits(self.10) |
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11,) as PackableTuple>::last_to_tuple_bits(self.11)
    }

    #[doc(hidden)]
    #[inline]
    unsafe fn tuple_bits_to_tuple(bits: usize) -> Self {
        (
            <(E0,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5, E6,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5, E6, E7,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11,) as PackableTuple>::tuple_bits_to_last(bits),
        )
    }
}
impl<E0: Packable, E1: Packable, E2: Packable, E3: Packable, E4: Packable, E5: Packable, E6: Packable, E7: Packable, E8: Packable, E9: Packable, E10: Packable, E11: Packable> PtrPack<(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11,)> {
    pub fn get_0(self) -> E0 {
        unsafe { <(E0,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_0(self, value: E0) -> Self {
        let bits = <(E0,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_1(self) -> E1 {
        unsafe { <(E0, E1,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_1(self, value: E1) -> Self {
        let bits = <(E0, E1,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_2(self) -> E2 {
        unsafe { <(E0, E1, E2,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_2(self, value: E2) -> Self {
        let bits = <(E0, E1, E2,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_3(self) -> E3 {
        unsafe { <(E0, E1, E2, E3,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_3(self, value: E3) -> Self {
        let bits = <(E0, E1, E2, E3,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_4(self) -> E4 {
        unsafe { <(E0, E1, E2, E3, E4,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_4(self, value: E4) -> Self {
        let bits = <(E0, E1, E2, E3, E4,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_5(self) -> E5 {
        unsafe { <(E0, E1, E2, E3, E4, E5,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_5(self, value: E5) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_6(self) -> E6 {
        unsafe { <(E0, E1, E2, E3, E4, E5, E6,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_6(self, value: E6) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5, E6,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_7(self) -> E7 {
        unsafe { <(E0, E1, E2, E3, E4, E5, E6, E7,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_7(self, value: E7) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5, E6, E7,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_8(self) -> E8 {
        unsafe { <(E0, E1, E2, E3, E4, E5, E6, E7, E8,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_8(self, value: E8) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5, E6, E7, E8,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_9(self) -> E9 {
        unsafe { <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_9(self, value: E9) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_10(self) -> E10 {
        unsafe { <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_10(self, value: E10) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_11(self) -> E11 {
        unsafe { <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_11(self, value: E11) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }
}

unsafe impl<E0: Packable, E1: Packable, E2: Packable, E3: Packable, E4: Packable, E5: Packable, E6: Packable, E7: Packable, E8: Packable, E9: Packable, E10: Packable, E11: Packable, E12: Packable> PackableTuple for (E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12,) {
    #[doc(hidden)]
    type Storage = E0::Storage;  // Take 1st elt's nullability

    #[doc(hidden)]
    type Last = E12;

    #[doc(hidden)]
    const LAST_HIGH_BIT: u32 = <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11,)>::LAST_LOW_BIT;
    #[doc(hidden)]
    const LAST_LOW_BIT: u32 = Self::LAST_HIGH_BIT - Self::Last::BITS;

    #[doc(hidden)]
    type LastBitRange = detail::TupleEltBitRange<Self>;

    #[doc(hidden)]
    #[inline]
    fn tuple_to_tuple_bits(self) -> usize {
        <(E0,) as PackableTuple>::last_to_tuple_bits(self.0) |
            <(E0, E1,) as PackableTuple>::last_to_tuple_bits(self.1) |
            <(E0, E1, E2,) as PackableTuple>::last_to_tuple_bits(self.2) |
            <(E0, E1, E2, E3,) as PackableTuple>::last_to_tuple_bits(self.3) |
            <(E0, E1, E2, E3, E4,) as PackableTuple>::last_to_tuple_bits(self.4) |
            <(E0, E1, E2, E3, E4, E5,) as PackableTuple>::last_to_tuple_bits(self.5) |
            <(E0, E1, E2, E3, E4, E5, E6,) as PackableTuple>::last_to_tuple_bits(self.6) |
            <(E0, E1, E2, E3, E4, E5, E6, E7,) as PackableTuple>::last_to_tuple_bits(self.7) |
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8,) as PackableTuple>::last_to_tuple_bits(self.8) |
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9,) as PackableTuple>::last_to_tuple_bits(self.9) |
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10,) as PackableTuple>::last_to_tuple_bits(self.10) |
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11,) as PackableTuple>::last_to_tuple_bits(self.11) |
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12,) as PackableTuple>::last_to_tuple_bits(self.12)
    }

    #[doc(hidden)]
    #[inline]
    unsafe fn tuple_bits_to_tuple(bits: usize) -> Self {
        (
            <(E0,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5, E6,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5, E6, E7,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12,) as PackableTuple>::tuple_bits_to_last(bits),
        )
    }
}
impl<E0: Packable, E1: Packable, E2: Packable, E3: Packable, E4: Packable, E5: Packable, E6: Packable, E7: Packable, E8: Packable, E9: Packable, E10: Packable, E11: Packable, E12: Packable> PtrPack<(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12,)> {
    pub fn get_0(self) -> E0 {
        unsafe { <(E0,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_0(self, value: E0) -> Self {
        let bits = <(E0,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_1(self) -> E1 {
        unsafe { <(E0, E1,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_1(self, value: E1) -> Self {
        let bits = <(E0, E1,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_2(self) -> E2 {
        unsafe { <(E0, E1, E2,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_2(self, value: E2) -> Self {
        let bits = <(E0, E1, E2,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_3(self) -> E3 {
        unsafe { <(E0, E1, E2, E3,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_3(self, value: E3) -> Self {
        let bits = <(E0, E1, E2, E3,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_4(self) -> E4 {
        unsafe { <(E0, E1, E2, E3, E4,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_4(self, value: E4) -> Self {
        let bits = <(E0, E1, E2, E3, E4,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_5(self) -> E5 {
        unsafe { <(E0, E1, E2, E3, E4, E5,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_5(self, value: E5) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_6(self) -> E6 {
        unsafe { <(E0, E1, E2, E3, E4, E5, E6,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_6(self, value: E6) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5, E6,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_7(self) -> E7 {
        unsafe { <(E0, E1, E2, E3, E4, E5, E6, E7,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_7(self, value: E7) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5, E6, E7,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_8(self) -> E8 {
        unsafe { <(E0, E1, E2, E3, E4, E5, E6, E7, E8,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_8(self, value: E8) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5, E6, E7, E8,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_9(self) -> E9 {
        unsafe { <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_9(self, value: E9) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_10(self) -> E10 {
        unsafe { <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_10(self, value: E10) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_11(self) -> E11 {
        unsafe { <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_11(self, value: E11) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_12(self) -> E12 {
        unsafe { <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_12(self, value: E12) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }
}

unsafe impl<E0: Packable, E1: Packable, E2: Packable, E3: Packable, E4: Packable, E5: Packable, E6: Packable, E7: Packable, E8: Packable, E9: Packable, E10: Packable, E11: Packable, E12: Packable, E13: Packable> PackableTuple for (E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13,) {
    #[doc(hidden)]
    type Storage = E0::Storage;  // Take 1st elt's nullability

    #[doc(hidden)]
    type Last = E13;

    #[doc(hidden)]
    const LAST_HIGH_BIT: u32 = <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12,)>::LAST_LOW_BIT;
    #[doc(hidden)]
    const LAST_LOW_BIT: u32 = Self::LAST_HIGH_BIT - Self::Last::BITS;

    #[doc(hidden)]
    type LastBitRange = detail::TupleEltBitRange<Self>;

    #[doc(hidden)]
    #[inline]
    fn tuple_to_tuple_bits(self) -> usize {
        <(E0,) as PackableTuple>::last_to_tuple_bits(self.0) |
            <(E0, E1,) as PackableTuple>::last_to_tuple_bits(self.1) |
            <(E0, E1, E2,) as PackableTuple>::last_to_tuple_bits(self.2) |
            <(E0, E1, E2, E3,) as PackableTuple>::last_to_tuple_bits(self.3) |
            <(E0, E1, E2, E3, E4,) as PackableTuple>::last_to_tuple_bits(self.4) |
            <(E0, E1, E2, E3, E4, E5,) as PackableTuple>::last_to_tuple_bits(self.5) |
            <(E0, E1, E2, E3, E4, E5, E6,) as PackableTuple>::last_to_tuple_bits(self.6) |
            <(E0, E1, E2, E3, E4, E5, E6, E7,) as PackableTuple>::last_to_tuple_bits(self.7) |
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8,) as PackableTuple>::last_to_tuple_bits(self.8) |
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9,) as PackableTuple>::last_to_tuple_bits(self.9) |
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10,) as PackableTuple>::last_to_tuple_bits(self.10) |
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11,) as PackableTuple>::last_to_tuple_bits(self.11) |
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12,) as PackableTuple>::last_to_tuple_bits(self.12) |
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13,) as PackableTuple>::last_to_tuple_bits(self.13)
    }

    #[doc(hidden)]
    #[inline]
    unsafe fn tuple_bits_to_tuple(bits: usize) -> Self {
        (
            <(E0,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5, E6,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5, E6, E7,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13,) as PackableTuple>::tuple_bits_to_last(bits),
        )
    }
}
impl<E0: Packable, E1: Packable, E2: Packable, E3: Packable, E4: Packable, E5: Packable, E6: Packable, E7: Packable, E8: Packable, E9: Packable, E10: Packable, E11: Packable, E12: Packable, E13: Packable> PtrPack<(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13,)> {
    pub fn get_0(self) -> E0 {
        unsafe { <(E0,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_0(self, value: E0) -> Self {
        let bits = <(E0,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_1(self) -> E1 {
        unsafe { <(E0, E1,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_1(self, value: E1) -> Self {
        let bits = <(E0, E1,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_2(self) -> E2 {
        unsafe { <(E0, E1, E2,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_2(self, value: E2) -> Self {
        let bits = <(E0, E1, E2,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_3(self) -> E3 {
        unsafe { <(E0, E1, E2, E3,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_3(self, value: E3) -> Self {
        let bits = <(E0, E1, E2, E3,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_4(self) -> E4 {
        unsafe { <(E0, E1, E2, E3, E4,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_4(self, value: E4) -> Self {
        let bits = <(E0, E1, E2, E3, E4,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_5(self) -> E5 {
        unsafe { <(E0, E1, E2, E3, E4, E5,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_5(self, value: E5) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_6(self) -> E6 {
        unsafe { <(E0, E1, E2, E3, E4, E5, E6,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_6(self, value: E6) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5, E6,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_7(self) -> E7 {
        unsafe { <(E0, E1, E2, E3, E4, E5, E6, E7,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_7(self, value: E7) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5, E6, E7,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_8(self) -> E8 {
        unsafe { <(E0, E1, E2, E3, E4, E5, E6, E7, E8,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_8(self, value: E8) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5, E6, E7, E8,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_9(self) -> E9 {
        unsafe { <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_9(self, value: E9) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_10(self) -> E10 {
        unsafe { <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_10(self, value: E10) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_11(self) -> E11 {
        unsafe { <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_11(self, value: E11) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_12(self) -> E12 {
        unsafe { <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_12(self, value: E12) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_13(self) -> E13 {
        unsafe { <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_13(self, value: E13) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }
}

unsafe impl<E0: Packable, E1: Packable, E2: Packable, E3: Packable, E4: Packable, E5: Packable, E6: Packable, E7: Packable, E8: Packable, E9: Packable, E10: Packable, E11: Packable, E12: Packable, E13: Packable, E14: Packable> PackableTuple for (E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14,) {
    #[doc(hidden)]
    type Storage = E0::Storage;  // Take 1st elt's nullability

    #[doc(hidden)]
    type Last = E14;

    #[doc(hidden)]
    const LAST_HIGH_BIT: u32 = <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13,)>::LAST_LOW_BIT;
    #[doc(hidden)]
    const LAST_LOW_BIT: u32 = Self::LAST_HIGH_BIT - Self::Last::BITS;

    #[doc(hidden)]
    type LastBitRange = detail::TupleEltBitRange<Self>;

    #[doc(hidden)]
    #[inline]
    fn tuple_to_tuple_bits(self) -> usize {
        <(E0,) as PackableTuple>::last_to_tuple_bits(self.0) |
            <(E0, E1,) as PackableTuple>::last_to_tuple_bits(self.1) |
            <(E0, E1, E2,) as PackableTuple>::last_to_tuple_bits(self.2) |
            <(E0, E1, E2, E3,) as PackableTuple>::last_to_tuple_bits(self.3) |
            <(E0, E1, E2, E3, E4,) as PackableTuple>::last_to_tuple_bits(self.4) |
            <(E0, E1, E2, E3, E4, E5,) as PackableTuple>::last_to_tuple_bits(self.5) |
            <(E0, E1, E2, E3, E4, E5, E6,) as PackableTuple>::last_to_tuple_bits(self.6) |
            <(E0, E1, E2, E3, E4, E5, E6, E7,) as PackableTuple>::last_to_tuple_bits(self.7) |
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8,) as PackableTuple>::last_to_tuple_bits(self.8) |
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9,) as PackableTuple>::last_to_tuple_bits(self.9) |
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10,) as PackableTuple>::last_to_tuple_bits(self.10) |
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11,) as PackableTuple>::last_to_tuple_bits(self.11) |
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12,) as PackableTuple>::last_to_tuple_bits(self.12) |
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13,) as PackableTuple>::last_to_tuple_bits(self.13) |
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14,) as PackableTuple>::last_to_tuple_bits(self.14)
    }

    #[doc(hidden)]
    #[inline]
    unsafe fn tuple_bits_to_tuple(bits: usize) -> Self {
        (
            <(E0,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5, E6,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5, E6, E7,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14,) as PackableTuple>::tuple_bits_to_last(bits),
        )
    }
}
impl<E0: Packable, E1: Packable, E2: Packable, E3: Packable, E4: Packable, E5: Packable, E6: Packable, E7: Packable, E8: Packable, E9: Packable, E10: Packable, E11: Packable, E12: Packable, E13: Packable, E14: Packable> PtrPack<(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14,)> {
    pub fn get_0(self) -> E0 {
        unsafe { <(E0,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_0(self, value: E0) -> Self {
        let bits = <(E0,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_1(self) -> E1 {
        unsafe { <(E0, E1,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_1(self, value: E1) -> Self {
        let bits = <(E0, E1,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_2(self) -> E2 {
        unsafe { <(E0, E1, E2,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_2(self, value: E2) -> Self {
        let bits = <(E0, E1, E2,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_3(self) -> E3 {
        unsafe { <(E0, E1, E2, E3,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_3(self, value: E3) -> Self {
        let bits = <(E0, E1, E2, E3,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_4(self) -> E4 {
        unsafe { <(E0, E1, E2, E3, E4,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_4(self, value: E4) -> Self {
        let bits = <(E0, E1, E2, E3, E4,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_5(self) -> E5 {
        unsafe { <(E0, E1, E2, E3, E4, E5,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_5(self, value: E5) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_6(self) -> E6 {
        unsafe { <(E0, E1, E2, E3, E4, E5, E6,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_6(self, value: E6) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5, E6,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_7(self) -> E7 {
        unsafe { <(E0, E1, E2, E3, E4, E5, E6, E7,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_7(self, value: E7) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5, E6, E7,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_8(self) -> E8 {
        unsafe { <(E0, E1, E2, E3, E4, E5, E6, E7, E8,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_8(self, value: E8) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5, E6, E7, E8,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_9(self) -> E9 {
        unsafe { <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_9(self, value: E9) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_10(self) -> E10 {
        unsafe { <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_10(self, value: E10) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_11(self) -> E11 {
        unsafe { <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_11(self, value: E11) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_12(self) -> E12 {
        unsafe { <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_12(self, value: E12) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_13(self) -> E13 {
        unsafe { <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_13(self, value: E13) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_14(self) -> E14 {
        unsafe { <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_14(self, value: E14) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }
}

unsafe impl<E0: Packable, E1: Packable, E2: Packable, E3: Packable, E4: Packable, E5: Packable, E6: Packable, E7: Packable, E8: Packable, E9: Packable, E10: Packable, E11: Packable, E12: Packable, E13: Packable, E14: Packable, E15: Packable> PackableTuple for (E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15,) {
    #[doc(hidden)]
    type Storage = E0::Storage;  // Take 1st elt's nullability

    #[doc(hidden)]
    type Last = E15;

    #[doc(hidden)]
    const LAST_HIGH_BIT: u32 = <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14,)>::LAST_LOW_BIT;
    #[doc(hidden)]
    const LAST_LOW_BIT: u32 = Self::LAST_HIGH_BIT - Self::Last::BITS;

    #[doc(hidden)]
    type LastBitRange = detail::TupleEltBitRange<Self>;

    #[doc(hidden)]
    #[inline]
    fn tuple_to_tuple_bits(self) -> usize {
        <(E0,) as PackableTuple>::last_to_tuple_bits(self.0) |
            <(E0, E1,) as PackableTuple>::last_to_tuple_bits(self.1) |
            <(E0, E1, E2,) as PackableTuple>::last_to_tuple_bits(self.2) |
            <(E0, E1, E2, E3,) as PackableTuple>::last_to_tuple_bits(self.3) |
            <(E0, E1, E2, E3, E4,) as PackableTuple>::last_to_tuple_bits(self.4) |
            <(E0, E1, E2, E3, E4, E5,) as PackableTuple>::last_to_tuple_bits(self.5) |
            <(E0, E1, E2, E3, E4, E5, E6,) as PackableTuple>::last_to_tuple_bits(self.6) |
            <(E0, E1, E2, E3, E4, E5, E6, E7,) as PackableTuple>::last_to_tuple_bits(self.7) |
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8,) as PackableTuple>::last_to_tuple_bits(self.8) |
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9,) as PackableTuple>::last_to_tuple_bits(self.9) |
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10,) as PackableTuple>::last_to_tuple_bits(self.10) |
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11,) as PackableTuple>::last_to_tuple_bits(self.11) |
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12,) as PackableTuple>::last_to_tuple_bits(self.12) |
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13,) as PackableTuple>::last_to_tuple_bits(self.13) |
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14,) as PackableTuple>::last_to_tuple_bits(self.14) |
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15,) as PackableTuple>::last_to_tuple_bits(self.15)
    }

    #[doc(hidden)]
    #[inline]
    unsafe fn tuple_bits_to_tuple(bits: usize) -> Self {
        (
            <(E0,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5, E6,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5, E6, E7,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14,) as PackableTuple>::tuple_bits_to_last(bits),
            <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15,) as PackableTuple>::tuple_bits_to_last(bits),
        )
    }
}
impl<E0: Packable, E1: Packable, E2: Packable, E3: Packable, E4: Packable, E5: Packable, E6: Packable, E7: Packable, E8: Packable, E9: Packable, E10: Packable, E11: Packable, E12: Packable, E13: Packable, E14: Packable, E15: Packable> PtrPack<(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15,)> {
    pub fn get_0(self) -> E0 {
        unsafe { <(E0,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_0(self, value: E0) -> Self {
        let bits = <(E0,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_1(self) -> E1 {
        unsafe { <(E0, E1,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_1(self, value: E1) -> Self {
        let bits = <(E0, E1,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_2(self) -> E2 {
        unsafe { <(E0, E1, E2,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_2(self, value: E2) -> Self {
        let bits = <(E0, E1, E2,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_3(self) -> E3 {
        unsafe { <(E0, E1, E2, E3,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_3(self, value: E3) -> Self {
        let bits = <(E0, E1, E2, E3,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_4(self) -> E4 {
        unsafe { <(E0, E1, E2, E3, E4,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_4(self, value: E4) -> Self {
        let bits = <(E0, E1, E2, E3, E4,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_5(self) -> E5 {
        unsafe { <(E0, E1, E2, E3, E4, E5,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_5(self, value: E5) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_6(self) -> E6 {
        unsafe { <(E0, E1, E2, E3, E4, E5, E6,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_6(self, value: E6) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5, E6,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_7(self) -> E7 {
        unsafe { <(E0, E1, E2, E3, E4, E5, E6, E7,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_7(self, value: E7) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5, E6, E7,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_8(self) -> E8 {
        unsafe { <(E0, E1, E2, E3, E4, E5, E6, E7, E8,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_8(self, value: E8) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5, E6, E7, E8,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_9(self) -> E9 {
        unsafe { <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_9(self, value: E9) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_10(self) -> E10 {
        unsafe { <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_10(self, value: E10) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_11(self) -> E11 {
        unsafe { <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_11(self, value: E11) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_12(self) -> E12 {
        unsafe { <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_12(self, value: E12) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_13(self) -> E13 {
        unsafe { <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_13(self, value: E13) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_14(self) -> E14 {
        unsafe { <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_14(self, value: E14) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }

    pub fn get_15(self) -> E15 {
        unsafe { <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15,) as PackableTuple>::tuple_bits_to_last(self.get_bits()) }
    }

    pub fn update_15(self, value: E15) -> Self {
        let bits = <(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15,) as PackableTuple>::update_tuple_bits_with_last(
            self.get_bits(),
            value,
        );
        unsafe { Self::from_bits(bits) }
    }
}
